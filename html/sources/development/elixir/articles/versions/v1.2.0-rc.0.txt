===========
v1.2.0-rc.0
===========

https://github.com/elixir-lang/elixir/releases/tag/v1.2.0-rc.0

----
概要
----

Erlang 18 のサポート
====================

Erlang 18 に特徴的な多くの機能が導入された。ハイライトは以下の通り。

* Map が数百万のキーにまでスケールできるようになった。そのため、 ``Dict`` と ``HashDict`` は非推奨となり、将来のリリースで廃止予定。代わりに ``Map`` を使うこと。同様に、 ``Set`` と ``HashSet`` も ``MapSet`` の推奨により廃止予定。
* Elixir と Erlang 双方のコンパイラの強化により、コンパイルが高速になった。
* Erlangコンパイラで新たなアノテーションが利用可能となったおかげで、ダイアライザーによる不正でネガティブな警告の発生が減少した。

言語強化
========

このリリースには4つの特筆すべき言語強化が含まれている。

* 複数の aliases/imports/require を追加

.. code-block:: elixir

  alias MyApp.{Foo, Bar, Baz}

* Map のキーに変数をサポート

.. code-block:: elixir

  %{key => value}

* Mapのキーと関数の節の中でピン演算子をサポート

.. code-block:: elixir

  %{^key => value} = %{key => value}
  fn ^key -> :ok end

* 複数の表現についてマッチさせるための特別なフォーム ``with`` を追加

.. code-block:: elixir

  with {:ok, contents} <- File.read("my_file.ex"),
       {res, binding} <- Code.eval_string(contents),
       do: {:ok, res}

Getting startedの体験
=====================

ワークフローの強化
==================

アンブレラ・アプリケーションは、ビルドファイルとコンフィギュレーションファイルの両方でシェアされることが可能である。
これは、以下のコンフィギュレーションをアンブレラ・アプリケーションの ``mix.exs`` ファイルに追記することで、アンブレラ・プロジェクトのコンパイル時間を劇的に短縮することを目的としている。

.. code-block:: elixir

  build_path: "../../_build",
  config_path: "../../config/config.exs",

最終的に、私たちが現在、並行性を強化し、コンパイル時間に影響することなく全ての環境で最高のパフォーマンスを提供できるよう、確固たる結果をキャッシュすることができるよう、標準でMixはプロトコルを強化するだろう。
これは、プロジェクトのコンフィグで ``consolidate_protocols: false`` を設定することにより無効化することが、今でも可能である。

これらは、Erlang 18へ以降する際に達成したコンパイル時間の高速化に対して、最も大きく貢献する追加である。

Rebar 3のサポート
=================


------------------------
v1.2.0-rc.0 (2015-12-09)
------------------------


強化
====

Elixir
------

Application
^^^^^^^^^^^

* アプリケーションの仕様と取得するために ``spec/1`` と ``spec/2`` を追加
* 与えられたモジュールが所属するアプリケーションを取得するために ``get_application/1`` を追加

Base
^^^^

* 10回くらい、エンコードとデコードの最適化を行った。

Enum
^^^^

* ``Enum.shuffle/1``, ``Enum.random/1``, ``Enum.take_random/2`` において、 ``:random`` の代わりに、高速かつシード生成が自動的に行われる ``:rand`` を使用する。
* ``Enum.with_index/2`` を追加

GenServer
^^^^^^^^^

* サーバーをシャットダウンする操作を信頼性をもって実行するため、 ``GenServer.stop/1`` を追加

IO
^^

* ``IO.ANSI`` 関連の関数 ``color`` を追加

Kernel
^^^^^^

* ``struct!/2`` を追加。 ``struct/2`` と似ているが、不正なキーに対して例外を上げる。
* ``@doc/@typedoc/@moduledoc`` アトリビュートが再定義された場合に警告する。
* ``defdelegate/2`` で変数が使用されていない場合に警告する。（影響がなくても。）
* ダイアライザーにて、誤判定を回避しつつ、クォートされた表現を生成されたものとしてマークする。
* ``%{key => value}`` の生成時と、 ``%{^key => value]`` のマッチ時に変数をキーにすることを許容する。
* ``fn`` 節及び ``for`` 文における ``<-`` の左端において ピン ``^`` 演算子を利用可能とした。
* 右側の各パラメタへのマッチングを許容するための特別なフォームとして、 ``with`` を導入した。
* ``->`` の右手側が何も表現されていなかった場合に例外を上げる。
* 実行時に利用可能なエンディアンと異なるエンディアンでElixirがコンパイルされた場合に警告する。
* ネストされたコンテキスト内において、ある変数が外部的に定義された後に使用された時、警告する。
* ある表現を、括弧で括らずにパイプへと入力しようとした時に、警告する。

Macro
^^^^^

* 前後処理を一度に実行する ``Macro.traverse/4`` を追加。

Process
^^^^^^^

* ``Process.get_keys/0`` を追加。

Stream
^^^^^^

* ``Stream.with_index/2`` を追加。

String
^^^^^^

* ``String.replace_{prefix,suffix,leading,trailing}/2`` を導入。最初の2つは文字列内で与えられた最初のマッチのみを置換する。後の2つは、与えられたマッチの全てを置換する。
* NFD 及び NFC 平準化を行う ``String.normalize/2`` 及び ``String.equivalent?/2`` をサポート

System
^^^^^^

* ``System.time_offset``, ``System.monotonic_time``, ``System.system_time``, ``System.convert_time_unit`` そして ``System.unique_integer`` を追加
* ``System.cmd/3`` が、 nil値を指定する変数を削除することができる。

Task
^^^^

* コール元プロセスへのリンクなしにスーパーバイザー配下のタスクを生成する ``Task.Supervisor.async_nolink/1/3`` を追加
* ``Task.yield_many/2`` を導入
* タスクが所有権のないプロセスから問い合わせを受けた場合に（永遠に待ち続ける代わりに）エラーの例外を上げる。

ExUnit
------

* 1つのテストで複数のエラーを上げることができるようになった。ゴールは、エコシステム内のツールが同じテストから複数の失敗レポートを出力することができるようになることである。
* テストが失敗した場合はいつでも タグ ``:foo`` 及び ``:bar`` に対する値を内包する ``@tag report: [:foo, :bar]`` をサポート。

IEx
---

* 常にWERLモードで動作するよう、Windowsにおいては ``IEX_WITH_WERL`` を利用可能とした。
* ``t(Module.type)`` 及び ``t(Module.type/arity)`` の型ドキュメントを表示。
* あらゆるデータ型についての情報を表示する ``i/1`` ヘルパーを追加。
* 与えられたプロセスを動作させる要求があるときはいつでも、ソースコードのスニペットを表示する。

Logger
------

* ロガーのメタデータのためのファイルを追加

Mix
---

* プロトコルをキャッシュし、常に一元管理する。
* 設定を誤っている可能性のあるテストファイルについて警告を行う ``warn_test_pattern`` を ``mix test`` に追加。
* 水面下のMixタスクがエラーメッセージのみを出力するよう設定する、 ``MIX_QUIET`` 環境変数を導入。
* Gitのオプションを検証し、競合するref, branch, tagsについて警告を行う。
* 配下のアプリケーションは、設定とビルドファイルを共有できるようになった。
* Rebar 3への試験的なサポートを追加。
* ある追加された依存関係に、別の依存関係との間で競合する ``:only`` オプションがある場合、警告を行わない。
* パーサーツールが利用できないときに、読めるエラーメッセージで例外を上げるようにした。
* ``_build`` から生成物を除去だけをするための ``--build`` フラグを ``mix deps.clean DEP`` に追加。


バグフィックス
==============

Kernel
------

* 正しくないキーバリュー構造について Access を使用した場合のエラーメッセージを強化。
* importのために ``:only`` 及び ``:except`` が与えられ競合する場合は例外を上げる。
* ``@file`` が与えられた関数に対してセットされている場合に ``__ENV__.file`` を変更する。
* ``Kernel.ParallelRequire`` が ``:warning_as_errors`` を認識できるようにした。
* 不正な ``do`` / ``do:`` に対するエラーメッセージを強化。
* アクセス演算子を使用している時に、 ``Macro.to_string/2`` が演算子の方が優先することを遵守することを確認する。
* rootを超越するパスをexpandする際にクラッシュしないようにした。例： ``Path.expand("/../..")``
* ``UnicodeConversionError`` が不正な文字列をエラーメッセージ内に含んでいないことを確認。

IEx
---

* ``--no-start`` が与えられた場合に、 ``recompile`` ヘルパーにおいてアプリを開始しないようにした。
* IEx内であらゆる式を評価する際にデータをコピーしないようにした。

Mix
---

* 傘下のrootでは常に、再帰的でないタスクを実行する。
* 非ラテン文字を含むディレクトリ名でrebarプロジェクトが動作することを確認
* ``mix.exs`` ファイルを持たない参加の ``apps`` 内部のディレクトリを無視する
* アプリの名前がパスのベースネームと異なるパスの依存関係でMixが使用可能かを確認する。
* gitリポジトリからhexリポジトリにアップデートするとき、かつgitのバージョンがSemVerを指し示していなかった場合に、依存関係がクラッシュしないように確認する。
* 依存関係が分岐してしまった場合に、リモートのコンバージャーを実行しない。
* 親の deps.get/deps.update について、傘下の依存関係が全ての環境に渡ってロードされていることを確認する。

ExUnit
------

* doctestの全てのコンパイルエラーに、ファイルと行番号を含める。


警告を伴わない軽微な機能廃止
============================

Kernel
------

Dict
^^^^

* ``Map`` の方が好ましいため、 ``Dict`` と ``HashDict`` はゆるやかに廃止する。

Keyword
^^^^^^^

* ``length/1`` の方が好ましいため、 ``Keyword.size/1`` はゆるやかに廃止する。

Map
^^^

* ``map_size/1`` の方が好ましいため、 ``Map.size/1`` はゆるやかに廃止する。

Set
^^^

* ``MapSet`` の方が好ましいため、 ``Set`` と ``HashSet`` はゆるやかに廃止する。

Mix
---

* ``Macro.camelize/1`` 及び ``Macro.underscore/1`` の方が好ましいため、 ``Mix.Utils.camelize/1`` 及び ``Mix.Utils.underscore/1`` はゆるやかに廃止する。

